{"version":3,"file":"index.cjs","sources":["../src/internal-utils/compound-client-rect.ts","../src/internal-utils/drag-selection.ts","../src/internal-utils/event-position.ts","../src/internal-utils/selection.ts","../src/internal-utils/selection-elements.ts","../src/editor/components/DefaultObject.tsx","../src/editor/components/drop-indicator.tsx","../src/editor/components/Element.tsx","../src/editor/components/Leaf.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor-event-listener.tsx"],"sourcesContent":["export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const collapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const focusTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const focusSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (collapsedSelection && focusTextBlock && focusSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint(focusTextBlock),\n      focus: utils.getBlockEndPoint(focusTextBlock),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint(selectionStartBlock)\n    const selectionEndPoint = utils.getBlockEndPoint(selectionEndBlock)\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {toPortableTextRange} from './ranges'\nimport {getNodeBlock} from './slate-utils'\nimport {fromSlateValue} from './values'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  const node = getEventNode({slateEditor, event})\n\n  if (!node) {\n    return undefined\n  }\n\n  const block = getNodeBlock({\n    editor: slateEditor,\n    schema,\n    node,\n  })\n\n  const positionBlock = getEventPositionBlock({node, slateEditor, event})\n  const selection = getEventSelection({\n    schema,\n    slateEditor,\n    event,\n  })\n\n  if (block && positionBlock && !selection && !Editor.isEditor(node)) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n        focus: utils.getBlockEndPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n      },\n    }\n  }\n\n  if (!positionBlock || !selection) {\n    return undefined\n  }\n\n  const focusBlockPath = selection.focus.path.at(0)\n  const focusBlockKey = utils.isKeyedSegment(focusBlockPath)\n    ? focusBlockPath._key\n    : undefined\n\n  if (!focusBlockKey) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(selection) &&\n    block &&\n    focusBlockKey !== block._key\n  ) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n        focus: utils.getBlockEndPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n      },\n    }\n  }\n\n  return {\n    block: positionBlock,\n    isEditor: Editor.isEditor(node),\n    selection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? toPortableTextRange(\n        fromSlateValue(slateEditor.children, schema.block.name),\n        range,\n        schema,\n      )\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      domRange = window.document.createRange()\n      domRange.setStart(position.offsetNode, position.offset)\n      domRange.setEnd(position.offsetNode, position.offset)\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\nexport function DefaultBlockObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </div>\n  )\n}\n\nexport function DefaultInlineObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </span>\n  )\n}\n","export function DropIndicator() {\n  return (\n    <div\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    />\n  )\n}\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {defineBehavior} from '../../behaviors'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport * as selectors from '../../selectors'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DefaultBlockObject, DefaultInlineObject} from './DefaultObject'\nimport {DropIndicator} from './drop-indicator'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editorActor = useContext(EditorActorContext)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected &&\n      slateEditor.selection &&\n      Range.isCollapsed(slateEditor.selection)) ||\n    false\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n\n  useEffect(() => {\n    const behavior = defineBehavior({\n      on: 'drag.dragover',\n      guard: ({snapshot, event}) => {\n        const dropFocusBlock = selectors.getFocusBlock({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: event.position.selection,\n          },\n        })\n\n        if (!dropFocusBlock || dropFocusBlock.node._key !== element._key) {\n          return false\n        }\n\n        const dragOrigin = snapshot.beta.internalDrag?.origin\n\n        if (!dragOrigin) {\n          return false\n        }\n\n        const draggedBlocks = selectors.getSelectedBlocks({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection,\n          },\n        })\n\n        if (\n          draggedBlocks.some(\n            (draggedBlock) => draggedBlock.node._key === element._key,\n          )\n        ) {\n          return false\n        }\n\n        const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection,\n          },\n        })\n\n        return draggingEntireBlocks\n      },\n      actions: [\n        ({event}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              setDragPositionBlock(event.position.block)\n            },\n          },\n          {\n            type: 'noop',\n          },\n        ],\n      ],\n    })\n\n    editorActor.send({\n      type: 'add behavior',\n      behavior,\n    })\n\n    return () => {\n      editorActor.send({\n        type: 'remove behavior',\n        behavior,\n      })\n    }\n  }, [editorActor, element._key])\n\n  useEffect(() => {\n    const behavior = defineBehavior({\n      on: 'drag.*',\n      guard: ({event}) => {\n        return event.type !== 'drag.dragover'\n      },\n      actions: [\n        () => [\n          {\n            type: 'effect',\n            effect: () => {\n              setDragPositionBlock(undefined)\n            },\n          },\n        ],\n      ],\n    })\n\n    editorActor.send({\n      type: 'add behavior',\n      behavior,\n    })\n\n    return () => {\n      editorActor.send({\n        type: 'remove behavior',\n        behavior,\n      })\n    }\n  }, [editorActor])\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )[0],\n    [slateEditor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (slateEditor.isInline(element)) {\n    const path = ReactEditor.findPath(slateEditor, element)\n    const [block] = Editor.node(slateEditor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <DefaultInlineObject value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <DefaultInlineObject value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n\n    if (slateEditor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      }\n    }\n\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n        <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n      </div>\n    )\n  }\n\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n\n  className = 'pt-block pt-object-block'\n\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditor),\n  )[0]\n\n  let renderedBlockFromProps: JSX.Element | undefined\n\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <DefaultBlockObject value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {children}\n      <div ref={blockRef} contentEditable={false} draggable={!readOnly}>\n        {renderedBlockFromProps ? (\n          renderedBlockFromProps\n        ) : (\n          <DefaultBlockObject value={value} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = <span ref={spanRef}>{returnedChildren}</span>\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {getSelectionDomNodes} from '../internal-utils/selection-elements'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport * as selectors from '../selectors'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {getEditorSnapshot} from './editor-selector'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'notify.selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'notify.loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'notify.done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'notify.focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'notify.selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find EventPosition for MouseEvent')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'mouse.click',\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'notify.blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n        const position = getEventPosition({\n          schema: editorActor.getSnapshot().context.schema,\n          slateEditor,\n          event: event.nativeEvent,\n        })\n\n        if (!position) {\n          console.warn('Could not find position for dragstart event')\n          return\n        }\n\n        const snapshot = getEditorSnapshot({\n          editorActorSnapshot: editorActor.getSnapshot(),\n          slateEditorInstance: slateEditor,\n        })\n        const dragSelection = getDragSelection({\n          eventSelection: position.selection,\n          snapshot,\n        })\n\n        const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        })\n\n        const dragGhost = document.createElement('div')\n\n        const draggedDomNodes = getSelectionDomNodes({\n          snapshot: {\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          },\n          slateEditor,\n        })\n\n        if (selectingEntireBlocks) {\n          // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n          const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const block of clonedBlockNodes) {\n            if (block instanceof HTMLElement) {\n              block.style.position = 'relative'\n            }\n            dragGhost.appendChild(block)\n          }\n\n          // A custom drag ghost element can be configured using this data attribute\n          const customGhost = dragGhost.querySelector(\n            '[data-pt-drag-ghost-element]',\n          )\n          if (customGhost) {\n            dragGhost.replaceChildren(customGhost)\n          }\n\n          // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n          dragGhost.setAttribute('data-dragged', '')\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          if (customGhost) {\n            const customGhostRect = customGhost.getBoundingClientRect()\n            const x = event.clientX - customGhostRect.left\n            const y = event.clientY - customGhostRect.top\n            dragGhost.style.width = `${customGhostRect.width}px`\n            dragGhost.style.height = `${customGhostRect.height}px`\n            event.dataTransfer.setDragImage(dragGhost, x, y)\n          } else {\n            const blocksDomRect = getCompoundClientRect(\n              draggedDomNodes.blockNodes,\n            )\n            const x = event.clientX - blocksDomRect.left\n            const y = event.clientY - blocksDomRect.top\n            dragGhost.style.width = `${blocksDomRect.width}px`\n            dragGhost.style.height = `${blocksDomRect.height}px`\n            event.dataTransfer.setDragImage(dragGhost, x, y)\n          }\n        } else {\n          const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const child of clonedChildNodes) {\n            dragGhost.appendChild(child)\n          }\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          const childrenDomRect = getCompoundClientRect(\n            draggedDomNodes.childNodes,\n          )\n          const x = event.clientX - childrenDomRect.left\n          const y = event.clientY - childrenDomRect.top\n          dragGhost.style.width = `${childrenDomRect.width}px`\n          dragGhost.style.height = `${childrenDomRect.height}px`\n\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n\n        editorActor.send({\n          type: 'dragstart',\n          origin: {\n            selection: dragSelection,\n          },\n          ghost: dragGhost,\n        })\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'drag.dragstart',\n            originEvent: {\n              dataTransfer: event.dataTransfer,\n            },\n            position: {\n              selection: dragSelection,\n            },\n          },\n          editor: slateEditor,\n        })\n\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n      }\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'drag.drag',\n            originEvent: {\n              dataTransfer: event.dataTransfer,\n            },\n          },\n          editor: slateEditor,\n        })\n\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n      }\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'drag.dragend',\n            originEvent: {\n              dataTransfer: event.dataTransfer,\n            },\n          },\n          editor: slateEditor,\n        })\n\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n      }\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n        const position = getEventPosition({\n          schema: editorActor.getSnapshot().context.schema,\n          slateEditor,\n          event: event.nativeEvent,\n        })\n\n        if (!position) {\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'drag.dragenter',\n            originEvent: {\n              dataTransfer: event.dataTransfer,\n            },\n            position,\n          },\n          editor: slateEditor,\n        })\n\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n      }\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n        const position = getEventPosition({\n          schema: editorActor.getSnapshot().context.schema,\n          slateEditor,\n          event: event.nativeEvent,\n        })\n\n        if (!position) {\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'drag.dragover',\n            originEvent: {\n              dataTransfer: event.dataTransfer,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n      }\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n        const position = getEventPosition({\n          schema: editorActor.getSnapshot().context.schema,\n          slateEditor,\n          event: event.nativeEvent,\n        })\n\n        if (!position) {\n          console.warn('Could not find position for drop event')\n          return\n        }\n\n        // Find and select the range where the drop happened\n        const range = ReactEditor.findEventRange(slateEditor, event)\n        slateEditor.select(range)\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'drag.drop',\n            originEvent: {\n              dataTransfer: event.dataTransfer,\n            },\n            position,\n          },\n          editor: slateEditor,\n        })\n\n        // Prevent Slate from handling the event\n        event.preventDefault()\n      }\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'drag.dragleave',\n            originEvent: {\n              dataTransfer: event.dataTransfer,\n            },\n          },\n          editor: slateEditor,\n        })\n      }\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/editor-machine'\nimport {useEditor} from './editor/editor-provider'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n"],"names":["getCompoundClientRect","nodes","length","DOMRect","elements","filter","node","Element","firstRect","at","getBoundingClientRect","left","top","right","bottom","i","rect","Math","min","max","getDragSelection","eventSelection","snapshot","dragSelection","collapsedSelection","selectors","context","selection","focusTextBlock","focusSpan","anchor","utils","getBlockStartPoint","focus","getBlockEndPoint","selectedBlocks","getSelectedBlocks","selectionStartBlock","selectionEndBlock","selectionStartPoint","selectionEndPoint","getEventPosition","schema","slateEditor","event","getEventNode","block","getNodeBlock","editor","positionBlock","getEventPositionBlock","getEventSelection","Editor","isEditor","path","_key","focusBlockPath","focusBlockKey","undefined","DOMEditor","hasTarget","target","toSlateNode","elementRect","toDOMNode","height","abs","pageY","range","getSlateRangeFromEvent","toPortableTextRange","fromSlateValue","children","name","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","offset","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","normalizePoint","point","value","newPath","newOffset","blockKey","childKey","find","blk","push","Array","isArray","child","cld","text","normalizeSelection","newAnchor","newFocus","isEqual","backward","getSelectionDomNodes","blockNodes","childNodes","blockEntries","from","mode","match","n","childEntries","isTextSpan","isBlock","map","blockNode","childNode","DefaultBlockObject","props","$","_c","t0","Symbol","for","userSelect","t1","_type","jsxs","DefaultInlineObject","DropIndicator","width","borderBottom","zIndex","debugWithName","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","element","schemaTypes","readOnly","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","editorActor","useContext","EditorActorContext","useSlateStatic","selected","useSelected","blockRef","useRef","inlineBlockObjectRef","focused","Range","isCollapsed","dragPositionBlock","setDragPositionBlock","useState","useEffect","behavior","defineBehavior","on","guard","dropFocusBlock","dragOrigin","beta","internalDrag","origin","some","draggedBlock","actions","type","effect","send","useMemo","KEY_TO_VALUE_ELEMENT","get","renderedBlock","className","blockPath","Error","isInline","ReactEditor","findPath","depth","schemaType","inlineObjects","SlateElement","isElement","elmPath","debugRenders","annotations","jsx","editorElementRef","isListItem","style","blockStyleType","styles","item","level","listItem","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","displayName","debug","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","usePortableTextEditor","blockSelected","setFocused","setSelected","parent","decoratorValues","decorators","dec","marks","uniq","mark","includes","annotationMarks","markDefs","def","Boolean","shouldTrackSelectionAndFocus","sel","PortableTextEditor","getSelection","isCollapsedSelection","startTransition","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","current","intersectsNode","onBlur","onFocus","onSelection","unsubscribe","content","returnedChildren","Text","isText","span","forEach","annotation","t","_child","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","keys","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","behaviorEvent","decorator","possibleCommand","command","withSyncRangeDecorations","syncRangeDecorations","originalApply","apply","op","getSnapshot","matches","PLACEHOLDER_STYLE","pointerEvents","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSelector","s","useSlate","blockTypeName","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","Fragment","decoration","rangeDecoration","component","restoreSelectionFromProps","JSON","stringify","normalizedSelection","slateRange","Transforms","select","operations","o","onChange","operation","newSlateRanges","rangeDecorationItem","SlateRange","isRange","onMoved","newSelection","newRange","moveRangeByOperation","getValue","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","stopPropagation","originEvent","dataTransfer","handleCut","handlePaste","onPasteResult","Promise","resolve","then","result","insert","blocks","parseBlocks","keyGenerator","options","refreshKeys","placement","catch","error","finally","handleOnFocus","isDefaultPrevented","start","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","key","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","_editor","decorate","isEqualToEmptyEditor","Path","equals","intersection","addEventListener","removeEventListener","handleDragStart","getEditorSnapshot","editorActorSnapshot","slateEditorInstance","selectingEntireBlocks","dragGhost","createElement","draggedDomNodes","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragImage","blocksDomRect","clonedChildNodes","childrenDomRect","ghost","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","findEventRange","handleDragLeave","SlateEditable","EditorEventListener","useEditor","useEffectEvent","subscription"],"mappings":"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"}